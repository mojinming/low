# def 函数名(参数):
#     语句1
#     语句2

# 定义一个函数

# 我们使用关键字 def 来定义一个函数，语法描述如下所示：
#
# def 函数名(参数):
#     语句1
#     语句2
# [copy]

# 让我们编写一个函数，它将接受两个整数作为输入，然后返回总和。

# >>> def sum(a, b):
# ...     return a + b
# >>> res = sum(234234, 34453546464)
# >>> res
# 34453780698L

# def palindrome(s):
#     return s == s[::-1]
# if __name__ == '__main__':  #作用：只能用于此文档，不能被调用。
#     s = input("Enter a string: ")
#     if palindrome(s):
#         print("Yay a palindrome")
#     else:
#         print("Oh no, not a palindrome")

# 局域或全局变量

# a = 9
# def change():
#     global a   没有它，执行到 print(a) 的时候会报错，因为后面有a
#     print(a)
#     a = 100
# change()

# 默认参数值
# def test(a , b=-99):
#     if a > b:
#         return True
#     else:
#         return False
# print(test(a=10,b=65))
# print(test(88))

# def f(a, data=[]):
#     data.append(a)
#     return data
# print(f(1))
# print(f(2))
# print(f(3))

# 强制关键字参数
# def hello(abc,name="user"):
#     print("Hello", name,abc)
#
# hello(abc="nm",name="aa")

# def hello(*, name='User'):
#     print("Hello", name)
# hello('shiyanlou')  # 这个出错

# 文档字符串
# import math
# def longest_side(a, b):
#     """
#     Function to find the length of the longest side of a right triangle.
#
#     :arg a: Side a of the triangle
#     :arg b: Side b of the triangle
#
#     :return: Length of the longest side c as float
#     """
#     return math.sqrt(a*a + b*b)
#
# # if __name__ == '__main__':
# #     print(longest_side.__doc__)
# #     print(longest_side(4,5))
# print(longest_side.__doc__)
# print(longest_side(4,5))
# print(longest_side(9,6))

# 高阶函数
# l = ['python', 'Linux', 'Git']
# for i in l:
#     print(i.upper())
#
# print([i for i in l])


# # 创建一个函数，将参数列表中每个元素都变成全大写
# >>> def high(l):
# ...     return [i.upper() for i in l]
# ...
# # 创建高阶函数，接受一个函数和一个列表作为参数
# >>> def test(h, l):
# ...     return h(l)
# ...
# >>> l = ['python', 'Linux', 'Git']
# # 运行高阶函数，返回预期的结果
# >>> test(high, l)
# ['PYTHON', 'LINUX', 'GIT']



# >>> lst = [1, 2, 3, 4, 5]
# >>> def square(num):
# ...     "返回所给数字的平方."
# ...     return num * num
# ...
# >>> print(list(map(square, lst)))
# [1, 4, 9, 16, 25]


def square(num):
    "返回所给数字的平方."
    return num * num
l=(5,6,8,9)
print(*map(square,l))
print(list(map(square,l))) #map返回一个序列（迭代器）
